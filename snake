#include "stdafx.h"
#include<conio.h>
#include<Windows.h>

#define WIDTH 20     //设置地图20行
#define HIGTH 40     //设置地图40列

struct snake
{
	int x;      //第i节蛇身的x坐标
	int y;      //第i节蛇身的y坐标
};

int map[WIDTH][HIGTH];    //二维数组map[][]，用来表示游戏地图
						  //为0时，表示空白，什么都没有
						  //为1时，表示上下围墙
						  //为2时，表示左右围墙
						  //为3时，表示蛇
						  //为4时，表示食物
struct snake snake_1[800];    //定义蛇的一维数组，地图是20*40的，总共是800点，蛇最长情况下也就800的长度，所以定义snake[800]
int score=0;       //表示玩家得分数
int direction=1;   //表示蛇移动方向，上为1，下为2，左为3，右为4，默认开局向上移动
int food_x,food_y; //表示食物的x,y坐标

//将光标移动到屏幕左上角
void gotoOrgin()
{
	HANDLE handle;         //定义一个句柄
	COORD coord;           //定义屏幕x,y坐标的结构体
	coord.X=0;
	coord.Y=0;            //x,y坐标都定位0,0，即屏幕的左上角
	handle=GetStdHandle(STD_OUTPUT_HANDLE);//从标准输出设备（屏幕）取得句柄
	SetConsoleCursorPosition(handle,coord);//将坐标移动到屏幕左上角
}


//初始化地图
void init()
{
	int i,j;
	for(i=0;i<WIDTH;i++)
		for(j=0;j<HIGTH;j++)
			map[i][j]=0;        //初始化二维数组，全部置为0

	for(i=0;i<WIDTH;i++)
		for(j=0;j<HIGTH;j++)
		{
			if(i==0||i==WIDTH-1)
				map[i][j]=1;        //赋值上下围墙 ----------------------
			if(j==0||j==HIGTH-1)
				map[i][j]=2;        //赋值左右围墙||||||||||||||||||||||||||||||
		}

	snake_1[0].x=10;
	snake_1[0].y=10;
	map[snake_1[0].x][snake_1[0].y]=3; //在地图中间初始化蛇身


	food_x=rand()%19+1;				//初始化食物位置,随便定义了一个位置
	food_y=rand()%39+1;
	map[food_x][food_y]=4;               

	for(i=0;i<WIDTH;i++)              //打印地图
	{
		for(j=0;j<HIGTH;j++)
			switch(map[i][j])
			{
				case 0: printf(" ");break;
				case 1: printf("_");break;
				case 2: printf("|");break;
				case 3: printf("@");break;           //蛇身用@表示
				case 4: printf("$");break;           //食物用$表示
			}
		printf("\n");
	}
}

void show_food()
{
	while(map[food_x][food_y]!=0)
	{
		food_x=rand()%19+1;
		food_y=rand()%39+1;		

	}
	map[food_x][food_y]=4;
}

//控制蛇身体的移动
void move()
{	
	char a;                       //负责接收键盘输入

	if(kbhit())                     //判断是否有键盘输入
	{
		a=getch();                  //输入的值送给a
		switch(a)
		{
			case 'w':direction=1; break;  //w向上移动
			case 's':direction=2; break;  //s向下移动
			case 'a':direction=3; break;  //a向左移动
			case 'd':direction=4; break;  //d向右移动
			default:break;
		}
	}

	if(score==0)
		map[snake_1[0].x][snake_1[0].y]=0;
	else
		map[snake_1[score].x][snake_1[score].y]=0;

	for(int i=score;i>0;i--)
	{ 
		snake_1[i].x=snake_1[i-1].x;
		snake_1[i].y=snake_1[i-1].y;
		map[snake_1[i].x][snake_1[i].y]=3;
	}
	

	switch(direction)
	{
		case 1:snake_1[0].x--; break;  //向上上，则蛇的x坐标减一
		case 2:snake_1[0].x++; break;  //向下
		case 3:snake_1[0].y--; break;  //向左
		case 4:snake_1[0].y++; break;  //向右
	}

	if(map[snake_1[0].x][snake_1[0].y]==4)
	{//蛇头的位置与食物重合
		score++;
		show_food();
	}

	//检测碰撞
	if(map[snake_1[0].x][snake_1[0].y]==1||map[snake_1[0].x][snake_1[0].y]==2)
		system("pause");

	map[snake_1[0].x][snake_1[0].y]=3;	
}

//显示用户界面
void show()
{
	gotoOrgin();                 //运行移动光标函数
	for(int i=0;i<WIDTH;i++)              //打印地图
	{
		for(int j=0;j<HIGTH;j++)
			switch(map[i][j])
			{
			case 0: printf(" ");break;
			case 1: printf("-");break;
			case 2: printf("|");break;
			case 3: printf("@");break;           //蛇身用@表示
			case 4: printf("$");break;           //食物用$表示
			}
			printf("\n");
	}
	printf("您的当前得分为：%d",score);
}

void main()
{
	init();
	while(1)
	{
		Sleep(300);
		move();
		show();
	}	
}
